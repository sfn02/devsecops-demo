# trivy-secret-config.yaml

# Global ignore patterns to skip scanning certain files/directories entirely.
# This is crucial for avoiding false positives in binary files or third-party assets.
# Trivy will not scan any files or directories matching these patterns for secrets.
ignore-patterns:
  - "**/__pycache__/**"       # Exclude all Python bytecode directories
  - "static/**/*.min.js"     # Exclude all minified JS files in static (common source of FPs like jQuery)
  - "node_modules/**"        # Exclude npm modules if you have them (often contain many FPs)
  - "dist/**"                # Exclude common build output directories
  - "*.lock"                 # Exclude lock files (e.g., package-lock.json, yarn.lock)
  - "*.pyc"                  # Explicitly exclude compiled Python files
  - ".git/**"                # Trivy's 'fs' scanner doesn't need to scan the .git directory itself, Gitleaks handles history.
  - ".idea/**"               # IDE configuration files
  - ".vscode/**"             # VS Code configuration files
  - "*.log"                  # Log files
  - "*.sqlite3"              # SQLite database files

# Define your custom secret detection rules here.
# Trivy will apply these rules in addition to its built-in secret rules.
rules:
  - id: custom-bcrypt-hash
    category: "credentials"
    title: "Bcrypt Password Hash"
    severity: "HIGH"
    # Regex to detect bcrypt hashes.
    # Format: $2a$COST$SALT_AND_HASH (e.g., $2a$10$zMv2skn0DWEfsZGG91rC/O)
    # The regex matches the specific bcrypt version prefix ($2a$, $2b$, $2y$, $2x$),
    # followed by the cost factor (e.g., $10$), and then 53 characters (salt + hash).
    regex: "\\$2[abxy]\\$\\d{2}\\$[a-zA-Z0-9./]{53}"
    keywords:
      - "$2a$"
      - "$2b$"
      - "$2y$"
      - "$2x$"
    # No specific path needed as hashes can appear anywhere.

  - id: custom-base64-key
    category: "credentials"
    title: "Generic Base64 Encoded Key/Secret"
    severity: "HIGH"
    # Detects base64-encoded strings that resemble cryptographic keys or secrets.
    # Example: TGWglAnagL1HIvWyKuNeYKl_J9K73nAIMNWofa7zW6E=
    # This regex looks for sequences of base64-valid characters (A-Z, a-z, 0-9, +, /, -, _),
    # with a minimum length of 32 characters, and optional '=' padding at the end.
    regex: "[A-Za-z0-9+/_-]{32,}={0,2}"
    keywords:
      - "key"
      - "secret"
      - "token"
    # Adding an entropy threshold helps reduce false positives for generic base64 strings.
    # A value of 3.5 is a common starting point; adjust higher (e.g., 4.0, 4.5) if still too many FPs.
    # Higher entropy means the string is more random, thus more likely to be a secret.
    entropy: 3.5
    # CONVERTED FROM LIST TO SINGLE REGEX STRING
    path: ".*\\.(py|js|json|yaml|yml|env|conf|ini|txt)$" # Matches files ending with these extensions
    # Allow rules specific to this 'custom-base64-key' rule to reduce false positives
    allow-rules:
      - id: allow-sri-hash
        description: "Allow Subresource Integrity (SRI) hashes in HTML/JS files"
        # This regex matches the full 'integrity="shaXXX-BASE64HASH"' attribute commonly found in HTML/JS.
        # It covers sha256, sha384, and sha512 hashes.
        regex: "integrity=\"sha(?:256|384|512)-[A-Za-z0-9+/=_-]{40,}\""
        # You can specify paths if this pattern only occurs in certain files, e.g.:
        # path: "templates/.*\\.html$|static/.*\\.(js|css)$"

      - id: allow-jquery-minified-string
        description: "Allow specific minified jQuery internal string (false positive)"
        # This regex specifically targets the minified string from your jQuery false positive.
        # `*+` matches one or more asterisks. `&` is used literally as it's not a special regex char in RE2.
        # `\.` escapes the dot.
        regex: "indexOf\\(\"\\*+\"\\)&\\&Zt\\.test\\(e\\.data\\)&"
        # You can specify paths if this pattern only occurs in certain files, e.g.:
        # path: "static/rest_framework/js/jquery-3.7.1.min.js$"

  - id: custom-salt-variable
    category: "credentials"
    title: "SALT Variable Assignment"
    severity: "HIGH"
    # Detects common variable names like 'SALT' or 'SALT_KEY' followed by an assignment and a string.
    # The `(?i)` flag makes the match case-insensitive (e.g., SALT, salt, Salt).
    # `\s*=\s*` matches the assignment operator with optional whitespace.
    # `["']?` matches an optional single or double quote.
    # `([a-zA-Z0-9+/=_-]{16,})` captures the potential secret string (min 16 chars).
    regex: "(?i)(SALT|SALT_KEY)\\s*=\\s*[\"']?([a-zA-Z0-9+/=_-]{16,})[\"']?"
    keywords:
      - "SALT"
      - "SALT_KEY"
    # CONVERTED FROM LIST TO SINGLE REGEX STRING
    path: ".*\\.(py|env|js|json|yaml|yml)$" # Matches files ending with these extensions

  - id: custom-secret-variable
    category: "credentials"
    title: "SECRET Variable Assignment"
    severity: "CRITICAL"
    # Detects 'SECRET' or 'SECRET_KEY' variable assignments.
    # `(?:_KEY)?` makes `_KEY` optional and non-capturing.
    regex: "(?i)SECRET(?:_KEY)?\\s*=\\s*[\"']?([a-zA-Z0-9+/=_-]{20,})[\"']?"
    keywords:
      - "SECRET"
      - "SECRET_KEY"
    # CONVERTED FROM LIST TO SINGLE REGEX STRING
    path: ".*\\.(py|env|js|json|yaml|yml)$" # Matches files ending with these extensions

  - id: custom-api-key-variable
    category: "credentials"
    title: "API Key Variable Assignment"
    severity: "HIGH"
    # Detects 'API_KEY' variable assignments.
    regex: "(?i)API_KEY\\s*=\\s*[\"']?([a-zA-Z0-9]{20,})[\"']?"
    keywords:
      - "API_KEY"
    # CONVERTED FROM LIST TO SINGLE REGEX STRING
    path: ".*\\.(py|env|js|json|yaml|yml)$" # Matches files ending with these extensions

# --- Optional: Enable/Disable Built-in Rules ---
# By default, all built-in secret rules are enabled when you use `--scanners secret`.
# You can uncomment and configure these sections if you want to explicitly control which built-in rules run.

# enable-builtin-rules:
#   - aws-access-key-id  # Example: Only enable AWS Access Key ID detection
#   - github-pat         # Example: Only enable GitHub Personal Access Token detection
#   # ... list specific built-in rule IDs you want to enable.
#   # If this is uncommented, only the listed built-in rules will run (along with your custom rules).

# disable-rules:
#   - slack-access-token # Example: Disable Slack Access Token detection
#   - slack-web-hook     # Example: Disable Slack Web Hook detection
#   # ... list specific built-in rule IDs you want to disable.
#   # If both enable-builtin-rules and disable-rules are specified, disable-rules takes precedence.

# disable-allow-rules:
#   - markdown # Example: If you want to scan markdown files for secrets, disable this built-in allow rule.
#   # ... list specific built-in allow rule IDs you want to disable.
