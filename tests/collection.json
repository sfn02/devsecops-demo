{
  "info": {
    "_postman_id": "c35fe641-a108-4b44-b567-4e1bc3e7cb07",
    "name": "RendezVous",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "44453496"
  },
  "item": [
    {
      "name": "Register User",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " ",
              "if (pm.response.code == \"201\"){",
              "    var requestData = pm.response.json()",
              "    var email = requestData.user.email",
              "    pm.environment.set('email',email)",
              "    pm.environment.set('skip_registration','true')",
              "    pm.execution.setNextRequest('Login User')",
              "}",
              "else{",
              "    var message = pm.response.json()[0].email[0].message",
              "    if (message === \"User with this Email already exists.\"){",
              "        console.log('user with this email already exists')",
              "        console.log('proceeding to login')",
              "        pm.execution.setNextRequest('Login User')",
              "    }",
              "    else{",
              "    pm.environment.set('skip_registration','false')",
              "    pm.execution.setNextRequest(null)",
              "    throw new Error('Failed user not created')",
              "    }",
              "",
              "}"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "var skip_registration = pm.environment.get('skip_registration')",
              "",
              "if (skip_registration === 'true'){",
              "    var date = new Date();",
              "    var year = String(date.getFullYear());",
              "    var month = String(date.getMonth()+2);",
              "    var month = month.padStart(2,\"0\")",
              "    var day = String(date.getDay());",
              "    var day = day.padStart(2,\"0\")",
              "    var formated_date = year + \"-\" + month + \"-\" + \"20\" + \"T\" + \"09\" + \":\" + \"00\"",
              "    pm.environment.set('appointment_scheduled_date',formated_date)",
              "    pm.execution.skipRequest()",
              "}"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "protocolProfileBehavior": {
        "disabledSystemHeaders": {
          "accept": true
        }
      },
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"first_name\":\"Soufiane\",\n    \"last_name\":\"Fhaili\",\n    \"email\":\"{{email}}\",\n    \"password\":\"{{password}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{BaseUrl}}/users/auth/register/",
          "host": [
            "{{BaseUrl}}"
          ],
          "path": [
            "users",
            "auth",
            "register",
            ""
          ]
        }
      },
      "response": []
    },
    {
      "name": "Login User",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "var code = pm.response.code",
              "",
              "if (code === 200){",
              "    var auth_token = pm.response.json().access;",
              "    pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "    pm.environment.set('auth_token',auth_token);",
              "})",
              "}"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "packages": {},
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"email\":\"{{email}}\",\n    \"password\":\"{{password}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{BaseUrl}}/users/auth/login/",
          "host": [
            "{{BaseUrl}}"
          ],
          "path": [
            "users",
            "auth",
            "login",
            ""
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get user profile",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "var code = pm.response.code",
              "var email = pm.environment.get('email')",
              "",
              "if (code === 200){",
              "    pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200)})",
              "",
              "    pm.test(\"response informations match\", function () {",
              "    pm.response.json().email === email})    ",
              "    }"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true,
        "disabledSystemHeaders": {
          "accept": true
        }
      },
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{auth_token}}",
              "type": "string"
            }
          ]
        },
        "method": "GET",
        "header": [
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{BaseUrl}}/users/profile/",
          "host": [
            "{{BaseUrl}}"
          ],
          "path": [
            "users",
            "profile",
            ""
          ]
        }
      },
      "response": []
    },
    {
      "name": "Modify user profile",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "var code = pm.response.code",
              "",
              "",
              "if (code === 201){",
              "    pm.test(\"Status code is 201\", function () {",
              "    pm.response.to.have.status(201)})",
              "",
              "    pm.test(\"response with sucess message\", function () {",
              "    pm.response.json().success === \"Profile updated succesfully\"})    ",
              "    }"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "protocolProfileBehavior": {
        "disabledSystemHeaders": {
          "accept": true
        }
      },
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{auth_token}}",
              "type": "string"
            }
          ]
        },
        "method": "PUT",
        "header": [
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"first_name\":\"Modified\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{BaseUrl}}/users/profile/",
          "host": [
            "{{BaseUrl}}"
          ],
          "path": [
            "users",
            "profile",
            ""
          ]
        }
      },
      "response": []
    },
    {
      "name": "Get doctor by sepeciality",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "var code = pm.response.code",
              "var doctor_id = pm.response.json()[0].id",
              "",
              "if (code === 200 && doctor_id){",
              "    pm.test(\"Status code is 201\", function () {",
              "    pm.response.to.have.status(200)})",
              "    pm.environment.set('doctor_id',doctor_id)",
              "    pm.execution.setNextRequest('Create appointment')",
              "    }",
              "else{",
              "    throw new Error(`No doctor to test with last response status was ${code}`)",
              "}",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true,
        "disabledSystemHeaders": {
          "accept": true
        }
      },
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{auth_token}}",
              "type": "string"
            }
          ]
        },
        "method": "GET",
        "header": [
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"first_name\":\"Modified\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{BaseUrl}}/doctor/filter-doctors/?speciality=neurologist",
          "host": [
            "{{BaseUrl}}"
          ],
          "path": [
            "doctor",
            "filter-doctors",
            ""
          ],
          "query": [
            {
              "key": "speciality",
              "value": "neurologist",
              "description": "filter doctor by speciality to book an appointment"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Create appointment",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "var code = pm.response.code",
              "var created_appointment_id = pm.response.json().id",
              "var success = pm.response.json().success",
              "",
              "",
              "console.log(pm.response.json())",
              "if (code === 201 && success === \"appointment created\"){",
              "    pm.test(\"Status code is 201\", function () {",
              "    pm.response.to.have.status(201)})",
              "    pm.environment.set('created_appointment_id',created_appointment_id)",
              "    }",
              "else{",
              "    console.log('Looks like the appointment already exists')",
              "    console.log('trying to proceed with next request')",
              "    pm.execution.setNextRequest('Cancel appointment')",
              "    //throw new Error(`failed to create appointment last response status was ${code}`)",
              "}",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "protocolProfileBehavior": {
        "disabledSystemHeaders": {
          "accept": true
        }
      },
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{auth_token}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"doctor\":{{doctor_id}},\n    \"reason\":\"suivi\",\n    \"speciality\":\"neurologist\",\n    \"date_scheduled\":\"{{appointment_scheduled_date}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{BaseUrl}}/patient/appointments/create/",
          "host": [
            "{{BaseUrl}}"
          ],
          "path": [
            "patient",
            "appointments",
            "create",
            ""
          ]
        }
      },
      "response": []
    },
    {
      "name": "Cancel appointment",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "var code = pm.response.code",
              "var created_appointment_id = pm.environment.get('created_appointment_id')",
              "",
              "",
              "if (code === 200){",
              "    pm.test(\"Status code is 201\", function () {",
              "    pm.response.to.have.status(200)})",
              "    pm.environment.set('created_appointment_id',created_appointment_id)",
              "    console.log(`Appointment with id ${created_appointment_id} was deleted`)",
              "    }",
              "else{",
              "    throw new Error(`failed to create appointment last response status was ${code}`)",
              "}",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true,
        "disabledSystemHeaders": {
          "accept": true
        }
      },
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{auth_token}}",
              "type": "string"
            }
          ]
        },
        "method": "DELETE",
        "header": [
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{BaseUrl}}/patient/appointments/{{created_appointment_id}}/cancel/",
          "host": [
            "{{BaseUrl}}"
          ],
          "path": [
            "patient",
            "appointments",
            "{{created_appointment_id}}",
            "cancel",
            ""
          ]
        }
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [
          "",
          "var email = pm.environment.get('password')",
          "console.log(email)"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "Baseurl",
      "value": "http://rendez-vous.test",
      "type": "string"
    }
  ]
}